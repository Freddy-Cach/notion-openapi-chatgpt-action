openapi: 3.1.0
info:
  title: Notion API
  description: API for interacting with Notion resources such as pages and databases.
  version: 1.0.0
servers:
- url: https://api.notion.com
  description: Main API server
paths:
  /v1/blocks/{block_id}:
    delete:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: block_id
        in: path
        required: true
        schema:
          type: string
      operationId: deleteBlock
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: block_id
        in: path
        required: true
        schema:
          type: string
      operationId: retrieveBlock
    patch:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: block_id
        in: path
        required: true
        schema:
          type: string
      operationId: updateBlock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockUpdate'
  /v1/blocks/{block_id}/children:
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: block_id
        in: path
        required: true
        schema:
          type: string
      operationId: listBlockChildren
    patch:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: block_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - children
              properties:
                children:
                  $ref: '#/components/schemas/BlockChildren'
      operationId: appendBlockChildren
  /v1/comments:
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: listComments
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
    post:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: createComment
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
  /v1/databases:
    post:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: createDatabase
      description: "Defines the schema and metadata for the new Notion database"
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [parent, title, properties]
              properties:
                parent:
                  $ref: "#/components/schemas/ParentObject"
                title:
                  type: array
                  items:
                    $ref: "#/components/schemas/RichText"
                icon:
                  $ref: "#/components/schemas/IconObject"
                properties:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/PropertySchema"
  /v1/databases/{database_id}:
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: database_id
        in: path
        required: true
        schema:
          type: string
      operationId: retrieveDatabase
    patch:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: database_id
        in: path
        required: true
        schema:
          type: string
      operationId: updateDatabase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseUpdate'
  /v1/databases/{database_id}/query:
    post:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: database_id
        in: path
        required: true
        schema:
          type: string
      operationId: queryDatabase
  /v1/file_uploads:
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: listFileUploads
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
    post:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: createFileUpload
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
  /v1/file_uploads/{file_upload_id}:
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: file_upload_id
        in: path
        required: true
        schema:
          type: string
      operationId: getFileUpload
  /v1/file_uploads/{file_upload_id}/complete:
    post:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: file_upload_id
        in: path
        required: true
        schema:
          type: string
      operationId: completeFileUpload
  /v1/file_uploads/{file_upload_id}/send:
    post:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: file_upload_id
        in: path
        required: true
        schema:
          type: string
      operationId: sendFileUpload
  /v1/oauth/introspect:
    post:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: oauthIntrospect
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
  /v1/oauth/revoke:
    post:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: oauthRevoke
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
  /v1/oauth/token:
    post:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: oauthToken
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
  /v1/pages:
    post:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: createPage
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageCreate'
  /v1/pages/{page_id}:
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: page_id
        in: path
        required: true
        schema:
          type: string
      operationId: retrievePage
    patch:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: page_id
        in: path
        required: true
        schema:
          type: string
      operationId: updatePage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageUpdate'
  /v1/pages/{page_id}/properties/{property_id}:
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: page_id
        in: path
        required: true
        schema:
          type: string
      - name: property_id
        in: path
        required: true
        schema:
          type: string
      operationId: getPageProperty
  /v1/search:
    post:
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: search
  /v1/users:
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: listUsers
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
  /v1/users/me:
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      operationId: getSelf
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
  /v1/users/{user_id}:
    get:
      responses:
        default:
          description: Default response
        '200':
          description: OK
      parameters:
      - $ref: "#/components/parameters/NotionVersionHeader"
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      operationId: getUser
components:
  headers:
    NotionVersion:
      required: true
      schema:
        type: string
        default: "2022-06-28"
      description: Notion API version
  parameters:
    NotionVersionHeader:
      name: Notion-Version
      in: header
      required: true
      schema:
        type: string
        default: "2022-06-28"
  schemas:
    Page:
      type: object
      required:
      - object
      - id
      - properties
      properties:
        object:
          type: string
          enum:
          - page
        id:
          type: string
          format: uuid
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DatabasePropertyCreate'
    PageUpdate:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DatabasePropertyCreate'
        archived:
          type: boolean
        icon:
          $ref: '#/components/schemas/IconObject'
        cover:
          $ref: '#/components/schemas/FileExternal'
    PageCreate:
      type: object
      required:
      - parent
      - properties
      properties:
        parent:
          oneOf:
          - type: object
            required:
            - page_id
            properties:
              page_id:
                type: string
                format: uuid
          - type: object
            required:
            - database_id
            properties:
              database_id:
                type: string
                format: uuid
          - type: object
            required:
            - type
            - workspace
            properties:
              type:
                type: string
                enum:
                - workspace
              workspace:
                type: boolean
                description: Only supported for public integrations with insert_content
                  capability
        properties:
          type: object
          properties:
            title:
              type: array
              items:
                type: object
                properties:
                  text:
                    type: object
                    properties:
                      content:
                        type: string
          additionalProperties: true
        children:
          type: array
          items:
            type: object
            additionalProperties: true
        icon:
          $ref: '#/components/schemas/IconObject'
        cover:
          $ref: '#/components/schemas/FileExternal'
    DatabaseCreate:
      type: object
      required:
      - parent
      - title
      - properties
      description: "Defines the schema and metadata for the new Notion database"
      properties:
        parent:
          type: object
          required:
          - type
          - page_id
          properties:
            type:
              type: string
              enum:
              - page_id
            page_id:
              type: string
        title:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                - text
              text:
                type: object
                properties:
                  content:
                    type: string
            required:
            - type
            - text
        properties:
          type: object
          additionalProperties: true
        icon:
          $ref: '#/components/schemas/IconObject'
        cover:
          $ref: '#/components/schemas/FileExternal'
    DatabaseUpdate:
      type: object
      properties:
        title:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                - text
              text:
                type: object
                properties:
                  content:
                    type: string
            required:
            - type
            - text
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DatabasePropertyCreate'
        icon:
          $ref: '#/components/schemas/IconObject'
        cover:
          $ref: '#/components/schemas/FileExternal'
    IconObject:
      oneOf:
      - type: object
        required:
        - type
        - emoji
        properties:
          type:
            type: string
            enum:
            - emoji
          emoji:
            type: string
      - type: object
        required:
        - type
        - external
        properties:
          type:
            type: string
            enum:
            - external
          external:
            type: object
            properties:
              url:
                type: string
                format: uri
    FileExternal:
      type: object
      required:
      - type
      - external
      properties:
        type:
          type: string
          enum:
          - external
        external:
          type: object
          properties:
            url:
              type: string
              format: uri
    DatabasePropertyCreate:
      type: object
      additionalProperties: true
      description: Any single property object allowed by Notion.
    PropertySchema:
      type: object
      required: [type]
      properties:
        type:
          type: string
        title:
          type: object
        rich_text:
          type: object
        number:
          type: object
        select:
          type: object
        multi_select:
          type: object
        date:
          type: object
        people:
          type: object
        files:
          type: object
        checkbox:
          type: object
        url:
          type: object
        email:
          type: object
        phone_number:
          type: object
        formula:
          $ref: "#/components/schemas/FormulaProperty"
        relation:
          $ref: "#/components/schemas/RelationProperty"
        rollup:
          $ref: "#/components/schemas/RollupProperty"
        created_time:
          type: object
        created_by:
          type: object
        last_edited_time:
          type: object
        last_edited_by:
          type: object
    ParentObject:
      type: object
      additionalProperties: true
    RichText:
      type: object
      additionalProperties: true
    FormulaProperty:
      type: object
      additionalProperties: true
    RelationProperty:
      type: object
      additionalProperties: true
    RollupProperty:
      type: object
      additionalProperties: true
    Database:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - database
        id:
          type: string
          format: uuid
        properties:
          type: object
          additionalProperties: true
    User:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - user
        id:
          type: string
          format: uuid
        name:
          type: string
        avatar_url:
          type: string
          format: uri
    BlockChildren:
      type: array
      description: Collection of child blocks.
      items:
        $ref: '#/components/schemas/Block'
    BlockUpdate:
      type: object
      properties:
        archived:
          type: boolean
        callout:
          type: object
          properties:
            icon:
              $ref: '#/components/schemas/IconObject'
    Block:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - block
        id:
          type: string
          format: uuid
        type:
          type: string
        block_data:
          type: object
          additionalProperties: true
    Comment:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - comment
        id:
          type: string
          format: uuid
        parent:
          type: object
          additionalProperties: true
        content:
          type: string
    PagePropertyItem:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - property_item
        id:
          type: string
          format: uuid
        property_data:
          type: object
          additionalProperties: true
    DatabaseQuery:
      type: object
      properties:
        filter:
          type: object
          additionalProperties: true
        sorts:
          type: array
          items:
            type: object
            additionalProperties: true
    DatabaseRecord:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - database_record
        id:
          type: string
          format: uuid
        record_data:
          type: object
          additionalProperties: true
    SearchRequest:
      type: object
      properties:
        query:
          type: string
        sort:
          type: object
          additionalProperties: true
    SearchResponse:
      type: array
      items:
        $ref: '#/components/schemas/SearchResult'
    SearchResult:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - search_result
        id:
          type: string
          format: uuid
        result_data:
          type: object
          additionalProperties: true
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- BearerAuth: []
