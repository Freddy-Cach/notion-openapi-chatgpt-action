openapi: 3.1.0
info:
  title: Notion API
  description: API for interacting with Notion resources such as pages and databases.
  version: 1.0.0
servers:
- url: https://api.notion.com/v1
  description: Main API server
paths:
  /v1/blocks/{block_id}:
    delete:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: block_id
        in: path
        required: true
        schema:
          type: string
      operationId: deleteBlock
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: block_id
        in: path
        required: true
        schema:
          type: string
      operationId: retrieveBlock
    patch:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: block_id
        in: path
        required: true
        schema:
          type: string
      operationId: updateBlock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockUpdate'
  /v1/blocks/{block_id}/children:
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: block_id
        in: path
        required: true
        schema:
          type: string
      operationId: listBlockChildren
    patch:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: block_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - children
              properties:
                children:
                  $ref: '#/components/schemas/BlockChildren'
      operationId: appendBlockChildren
  /v1/comments:
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: listComments
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
    post:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: createComment
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
  /v1/databases:
    post:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: createDatabase
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseCreate'
  /v1/databases/{database_id}:
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: database_id
        in: path
        required: true
        schema:
          type: string
      operationId: retrieveDatabase
    patch:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: database_id
        in: path
        required: true
        schema:
          type: string
      operationId: updateDatabase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseUpdate'
  /v1/databases/{database_id}/query:
    post:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: database_id
        in: path
        required: true
        schema:
          type: string
      operationId: queryDatabase
  /v1/file_uploads:
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: listFileUploads
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
    post:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: createFileUpload
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
  /v1/file_uploads/{file_upload_id}:
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: file_upload_id
        in: path
        required: true
        schema:
          type: string
      operationId: getFileUpload
  /v1/file_uploads/{file_upload_id}/complete:
    post:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: file_upload_id
        in: path
        required: true
        schema:
          type: string
      operationId: completeFileUpload
  /v1/file_uploads/{file_upload_id}/send:
    post:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: file_upload_id
        in: path
        required: true
        schema:
          type: string
      operationId: sendFileUpload
  /v1/oauth/introspect:
    post:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: oauthIntrospect
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
  /v1/oauth/revoke:
    post:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: oauthRevoke
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
  /v1/oauth/token:
    post:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: oauthToken
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
  /v1/pages:
    post:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: createPage
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageCreate'
  /v1/pages/{page_id}:
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: page_id
        in: path
        required: true
        schema:
          type: string
      operationId: retrievePage
    patch:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: page_id
        in: path
        required: true
        schema:
          type: string
      operationId: updatePage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageUpdate'
  /v1/pages/{page_id}/properties/{property_id}:
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: page_id
        in: path
        required: true
        schema:
          type: string
      - name: property_id
        in: path
        required: true
        schema:
          type: string
      operationId: getPageProperty
  /v1/search:
    post:
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: search
  /v1/users:
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: listUsers
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
  /v1/users/me:
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      operationId: getSelf
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
  /v1/users/{user_id}:
    get:
      responses:
        default:
          description: Default response
        200:
          description: OK
      parameters:
      - name: Notion-Version
        in: header
        required: true
        schema:
          type: string
          default: '2022-06-28'
        description: Notion API version
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      operationId: getUser
components:
  parameters:
    NotionVersion:
      name: Notion-Version
      in: header
      required: true
      schema:
        type: string
        default: '2022-06-28'
      description: Notion API version
  headers:
    NotionVersion:
      required: true
      schema:
        type: string
        default: '2022-06-28'
      description: Notion API version
  schemas:
    Page:
      type: object
      required:
      - object
      - id
      - properties
      properties:
        object:
          type: string
          enum:
          - page
        id:
          type: string
          format: uuid
        properties:
          type: object
          additionalProperties: true
    PageUpdate:
      type: object
      properties:
        properties:
          type: object
          additionalProperties: true
        archived:
          type: boolean
        icon:
          $ref: '#/components/schemas/IconObject'
        cover:
          $ref: '#/components/schemas/FileExternal'
    PageCreate:
      type: object
      required:
        - parent
        - properties
      properties:
        parent:
          oneOf:
            - type: object
              required:
                - page_id
              properties:
                page_id:
                  type: string
                  format: uuid
            - type: object
              required:
                - database_id
              properties:
                database_id:
                  type: string
                  format: uuid
            - type: object
              required:
                - type
                - workspace
              properties:
                type:
                  type: string
                  enum:
                    - workspace
                workspace:
                  type: boolean
                  description: Only supported for public integrations with insert_content capability
        properties:
          type: object
          properties:
            title:
              type: array
              items:
                type: object
                properties:
                  text:
                    type: object
                    properties:
                      content:
                        type: string
          additionalProperties: true
        children:
          type: array
          items:
            type: object
            additionalProperties: true
        icon:
          $ref: '#/components/schemas/IconObject'
        cover:
          $ref: '#/components/schemas/FileExternal'
    DatabaseCreate:
      type: object
      required:
        - parent
        - title
        - properties
      properties:
        parent:
          type: object
          required:
            - type
            - page_id
          properties:
            type:
              type: string
              enum:
                - page_id
            page_id:
              type: string
        title:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - text
              text:
                type: object
                properties:
                  content:
                    type: string
            required:
              - type
              - text
        icon:
          $ref: '#/components/schemas/IconObject'
        cover:
          $ref: '#/components/schemas/FileExternal'
        properties:
          type: object
          description: |
            Map of property names to property definitions. The object must
            include at least one property of type `title` (for example a
            `Name` property). Only a subset of property types are allowed
            when creating a database. Unsupported types, such as `status`,
            may be added later using the update database endpoint.
          additionalProperties:
            $ref: '#/components/schemas/DatabasePropertyCreate'
    DatabaseUpdate:
      type: object
      properties:
        title:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - text
              text:
                type: object
                properties:
                  content:
                    type: string
            required:
              - type
              - text
        properties:
          type: object
          additionalProperties: true
        icon:
          $ref: '#/components/schemas/IconObject'
        cover:
          $ref: '#/components/schemas/FileExternal'
    IconObject:
      oneOf:
        - type: object
          required:
            - type
            - emoji
          properties:
            type:
              type: string
              enum:
                - emoji
            emoji:
              type: string
        - type: object
          required:
            - type
            - external
          properties:
            type:
              type: string
              enum:
                - external
            external:
              type: object
              properties:
                url:
                  type: string
                  format: uri
    FileExternal:
      type: object
      required:
        - type
        - external
      properties:
        type:
          type: string
          enum:
            - external
        external:
          type: object
          properties:
            url:
              type: string
              format: uri
    DatabasePropertyCreate:
      description: Allowed property definition when creating a database
      oneOf:
        - required:
            - title
          properties:
            title:
              type: object
              additionalProperties: true
        - required:
            - rich_text
          properties:
            rich_text:
              type: object
              additionalProperties: true
        - required:
            - number
          properties:
            number:
              type: object
              additionalProperties: true
        - required:
            - select
          properties:
            select:
              type: object
              properties:
                options:
                  type: array
                  items:
                    type: object
                    additionalProperties: true
              additionalProperties: true
        - required:
            - multi_select
          properties:
            multi_select:
              type: object
              properties:
                options:
                  type: array
                  items:
                    type: object
                    additionalProperties: true
              additionalProperties: true
        - required:
            - date
          properties:
            date:
              type: object
              additionalProperties: true
        - required:
            - people
          properties:
            people:
              type: object
              additionalProperties: true
        - required:
            - files
          properties:
            files:
              type: object
              additionalProperties: true
        - required:
            - checkbox
          properties:
            checkbox:
              type: object
              additionalProperties: true
        - required:
            - url
          properties:
            url:
              type: object
              additionalProperties: true
        - required:
            - email
          properties:
            email:
              type: object
              additionalProperties: true
        - required:
            - phone_number
          properties:
            phone_number:
              type: object
              additionalProperties: true
    Database:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - database
        id:
          type: string
          format: uuid
        properties:
          type: object
          additionalProperties: true
    User:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - user
        id:
          type: string
          format: uuid
        name:
          type: string
        avatar_url:
          type: string
          format: uri
    BlockChildren:
      type: array
      description: Children cannot include a child_database block. Use the database creation endpoint instead.
      items:
        $ref: '#/components/schemas/Block'
    BlockUpdate:
      type: object
      properties:
        archived:
          type: boolean
        callout:
          type: object
          properties:
            icon:
              $ref: '#/components/schemas/IconObject'
    Block:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - block
        id:
          type: string
          format: uuid
        type:
          type: string
        block_data:
          type: object
          additionalProperties: true
    Comment:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - comment
        id:
          type: string
          format: uuid
        parent:
          type: object
          additionalProperties: true
        content:
          type: string
    PagePropertyItem:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - property_item
        id:
          type: string
          format: uuid
        property_data:
          type: object
          additionalProperties: true
    DatabaseQuery:
      type: object
      properties:
        filter:
          type: object
          additionalProperties: true
        sorts:
          type: array
          items:
            type: object
            additionalProperties: true
    DatabaseRecord:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - database_record
        id:
          type: string
          format: uuid
        record_data:
          type: object
          additionalProperties: true
    SearchRequest:
      type: object
      properties:
        query:
          type: string
        sort:
          type: object
          additionalProperties: true
    SearchResponse:
      type: array
      items:
        $ref: '#/components/schemas/SearchResult'
    SearchResult:
      type: object
      required:
      - object
      - id
      properties:
        object:
          type: string
          enum:
          - search_result
        id:
          type: string
          format: uuid
        result_data:
          type: object
          additionalProperties: true
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- BearerAuth: []
